package main

import (
	"bufio"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
	"path"
	"record-write-testing/lib/record"
	"sort"
	"strconv"
	"strings"
)

var MaxRows = flag.Int("maxrows", 10000, "Max number of rows to read from file")

var InputPath = flag.String("input", "./data/test.out", "Input file path. Should be generated by TSBS")

var OutputPath = flag.String("out", "./data/output", "Output folder")

var (
	tagsMap   = map[string][][]string{}
	fieldsMap = map[string][][]string{}
	timesMap  = map[string][]string{}
	mstCount  = map[string]int{}
)

func main() {
	flag.Parse()
	input, err := os.Open(*InputPath)
	if err != nil {
		panic(err)
	}
	defer input.Close()
	reader := bufio.NewReader(input)
	lineCount := 0
	for {
		line, err := reader.ReadString('\n')
		lineCount += 1
		if errors.Is(err, io.EOF) {
			fmt.Printf("Read %d lines", lineCount)
			break
		}
		if err != nil {
			panic(err)
		}

		mst, line, find := strings.Cut(line, ",")
		if !find {
			panic("invalid line protocol")
		}

		contents := strings.Split(line, " ")
		if len(contents) != 3 {
			panic("invalid line protocol")
		}
		tags := strings.Split(contents[0], ",")
		fields := strings.Split(contents[1], ",")
		timeField := contents[2]
		isFull := appendAll(tags, fields, timeField, mst)
		if isFull {
			res := toRecordBytes(mst)
			count, ok := mstCount[mst]
			if !ok {
				count = 1
			}
			outFileName := path.Join(*OutputPath, mst+"_"+strconv.Itoa(count)+"_"+strconv.Itoa(*MaxRows))
			outFile, err := os.OpenFile(outFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
			if err != nil {
				panic(err)
			}
			mstCount[mst] = count + 1
			_, err = outFile.Write(res)
			if err != nil {
				panic(err)
			}
			resetAll(mst)
			outFile.Close()
		}
	}

	for k, v := range timesMap {
		if len(v) == 0 {
			continue
		}
		res := toRecordBytes(k)
		count, ok := mstCount[k]
		if !ok {
			count = 1
		}
		outFileName := path.Join(*OutputPath, k+"_"+strconv.Itoa(count)+"_"+strconv.Itoa(len(v)))
		outFile, err := os.OpenFile(outFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
		if err != nil {
			panic(err)
		}
		mstCount[k] = count + 1
		_, err = outFile.Write(res)
		if err != nil {
			panic(err)
		}
		resetAll(k)
		outFile.Close()
	}
}

func appendAll(tags, fields []string, timeField string, mst string) bool {
	_, ok := timesMap[mst]
	if !ok {
		timesMap[mst] = make([]string, 0, *MaxRows)
		tagsMap[mst] = make([][]string, 0, *MaxRows)
		fieldsMap[mst] = make([][]string, 0, *MaxRows)
	} else {
		timesMap[mst] = append(timesMap[mst], timeField)
		tagsMap[mst] = append(tagsMap[mst], fields)
		fieldsMap[mst] = append(fieldsMap[mst], tags)
	}
	if len(timesMap[mst]) == *MaxRows {
		return true
	}
	return false
}

func resetAll(mst string) {
	tagsMap[mst] = tagsMap[mst][:0]
	fieldsMap[mst] = fieldsMap[mst][:0]
	timesMap[mst] = timesMap[mst][:0]
}

func toRecordBytes(mst string) []byte {
	idxMap := map[string]int{} // indicates col name to col index, i.e. rec.ColVals[idxMap[col]]
	tags := tagsMap[mst]
	fields := fieldsMap[mst]
	timeFields := timesMap[mst]
	schema := getSchemas(tags[0], fields[0], idxMap)
	rec := record.NewRecordBuilder(schema)

	for i, t := range timeFields {
		currTag := tags[i]
		currField := fields[i]
		for _, tag := range currTag {
			kv := strings.Split(tag, "=")
			k, v := kv[0], kv[1]
			rec.ColVals[idxMap[k]].AppendString(v)
		}
		for _, field := range currField {
			kv := strings.Split(field, "=")
			k, v := kv[0], kv[1]
			rec.ColVals[idxMap[k]].AppendString(v)
		}
		currTime, _ := strconv.ParseInt(t, 10, 64)
		rec.AppendTime(currTime)
	}
	sort.Sort(rec)
	err := record.CheckRecord(rec)
	if err != nil {
		panic(err)
	}
	res := make([]byte, 0)
	res, err = rec.Marshal(res)
	if err != nil {
		panic(err)
	}
	return res
}

func getSchemas(tags, fields []string, m map[string]int) record.Schemas {
	res := record.Schemas{}
	for i, tag := range tags {
		t := strings.Split(tag, "=") // 0: ColName, 1: ColVal
		res = append(res, record.Field{Name: t[0], Type: record.FieldTypeTag})
		m[t[0]] = i
	}
	for i, field := range fields {
		t := strings.Split(field, "=")
		res = append(res, record.Field{Name: t[0], Type: record.FieldTypeString}) // for convenience here
		m[t[0]] = i + len(tags)
	}
	res = append(res, record.Field{Name: record.TimeField, Type: record.FieldTypeInt})
	return res
}
